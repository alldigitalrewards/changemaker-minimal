name: Database Migration & Verification

on:
  push:
    branches:
      - main
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
      - 'prisma/seed.ts'
      - '.github/workflows/database-migration.yml'
  workflow_dispatch:
    inputs:
      run_seeds:
        description: 'Run database seeds'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Backup production database
        env:
          PGPASSWORD: Changemaker2025!
        run: |
          echo "üíæ Creating database backup..."
          BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).sql"
          echo "Backup name: $BACKUP_NAME"

          # Install PostgreSQL client
          sudo apt-get update && sudo apt-get install -y postgresql-client

          # Create backup using pg_dump
          pg_dump \
            --host=aws-1-us-east-2.pooler.supabase.com \
            --port=5432 \
            --username=postgres \
            --dbname=postgres \
            --no-password \
            --format=custom \
            --file="$BACKUP_NAME" \
            --verbose

          echo "‚úÖ Backup created: $BACKUP_NAME ($(du -h $BACKUP_NAME | cut -f1))"

          # Upload backup as artifact
          mkdir -p backups
          mv "$BACKUP_NAME" backups/
          echo "backup_file=backups/$BACKUP_NAME" >> $GITHUB_OUTPUT
        id: backup

      - name: Upload database backup
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backups/
          retention-days: 30

      - name: Apply Prisma migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
        run: |
          echo "üöÄ Applying Prisma migrations to production..."
          pnpm prisma migrate deploy
          echo "‚úÖ Migrations applied successfully"

      - name: Run database seeds
        if: github.event.inputs.run_seeds == 'true'
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "üå± Running database seeds..."
          pnpm prisma db seed
          echo "‚úÖ Seeds completed"

      - name: Verify database state
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üîç Verifying database state..."
          pnpm prisma db pull --print
          echo "‚úÖ Database verification complete"

      - name: Health check
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üè• Running health checks..."

          # Test database connectivity
          echo "Testing database connection..."
          pnpm prisma db execute --stdin <<< "SELECT 1 as health_check;"

          # Verify critical tables exist
          echo "Verifying schema..."
          pnpm prisma db execute --stdin <<< "
            SELECT
              COUNT(*) as table_count
            FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_type = 'BASE TABLE';
          "

          # Test production endpoint if available
          if [ -n "$VERCEL_URL" ]; then
            echo "Testing production endpoint: https://$VERCEL_URL"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://$VERCEL_URL" || echo "000")
            if [ "$RESPONSE" -eq 200 ] || [ "$RESPONSE" -eq 307 ]; then
              echo "‚úÖ Production endpoint responding"
            else
              echo "‚ö†Ô∏è  Production endpoint returned status: $RESPONSE"
            fi
          else
            echo "‚ö†Ô∏è  VERCEL_URL not set, skipping endpoint check"
          fi

          echo "‚úÖ Health check passed"

  e2e-smoke-test:
    needs: migrate
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm playwright install chromium --with-deps

      - name: Install Playwright deps only
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm playwright install-deps chromium

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Start dev server
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "üöÄ Starting Next.js dev server..."
          pnpm dev &
          DEV_PID=$!
          echo "DEV_PID=$DEV_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "‚úÖ Dev server ready"
              break
            fi
            echo "Waiting for dev server... ($i/30)"
            sleep 2
          done

      - name: Run focused E2E tests
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "üß™ Running focused E2E tests..."
          pnpm playwright test tests/e2e/smoke --project=chromium
          echo "‚úÖ E2E smoke tests passed"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          kill $DEV_PID || true
          echo "‚úÖ Cleanup complete"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7