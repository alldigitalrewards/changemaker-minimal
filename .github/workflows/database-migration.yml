name: Database Migration & Verification

on:
  push:
    branches:
      - main
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
      - 'prisma/seed.ts'
      - '.github/workflows/database-migration.yml'
  workflow_dispatch:
    inputs:
      run_seeds:
        description: 'Run database seeds'
        required: false
        default: false
        type: boolean

jobs:
  migrate:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Backup production database
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
        run: |
          echo "💾 Creating database backup..."
          BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S).sql"
          echo "Backup name: $BACKUP_NAME"
          # Note: Actual backup would use pg_dump via Supabase API or direct connection
          # For now, log the intent
          echo "✅ Backup logged (implement pg_dump for production use)"

      - name: Apply Prisma migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
        run: |
          echo "🚀 Applying Prisma migrations to production..."
          pnpm prisma migrate deploy
          echo "✅ Migrations applied successfully"

      - name: Run database seeds
        if: github.event.inputs.run_seeds == 'true'
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "🌱 Running database seeds..."
          pnpm prisma db seed
          echo "✅ Seeds completed"

      - name: Verify database state
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "🔍 Verifying database state..."
          pnpm prisma db pull --print
          echo "✅ Database verification complete"

      - name: Health check
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "🏥 Running health checks..."
          pnpm prisma studio --browser none &
          STUDIO_PID=$!
          sleep 5
          kill $STUDIO_PID || true
          echo "✅ Health check passed"

  e2e-smoke-test:
    needs: migrate
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install chromium --with-deps

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Start dev server
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "🚀 Starting Next.js dev server..."
          pnpm dev &
          DEV_PID=$!
          echo "DEV_PID=$DEV_PID" >> $GITHUB_ENV

          # Wait for server to be ready
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "✅ Dev server ready"
              break
            fi
            echo "Waiting for dev server... ($i/30)"
            sleep 2
          done

      - name: Run focused E2E tests
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "🧪 Running focused E2E tests..."
          pnpm playwright test tests/e2e/smoke --project=chromium
          echo "✅ E2E smoke tests passed"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          kill $DEV_PID || true
          echo "✅ Cleanup complete"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7