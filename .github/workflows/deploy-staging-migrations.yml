name: Deploy Staging Migrations

on:
  push:
    branches:
      - staging
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
      - 'prisma/seed-staging.ts'
      - '.github/workflows/deploy-staging-migrations.yml'
  workflow_dispatch:
    inputs:
      reset_database:
        description: 'Reset database (DELETE ALL DATA)'
        required: false
        default: false
        type: boolean
      force_reseed:
        description: 'Force re-seed (even if data exists)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy-migrations:
    name: Deploy Migrations to Staging Database
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Reset database (if requested)
        if: github.event.inputs.reset_database == 'true'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}
        run: |
          echo "⚠️  RESETTING DATABASE - ALL DATA WILL BE DELETED"
          pnpm prisma migrate reset --force --skip-seed
          echo "✅ Database reset complete"

      - name: Check migration status
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Checking migration status..."
          pnpm prisma migrate status

      - name: Deploy migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Deploying pending migrations to staging database..."
          pnpm prisma migrate deploy

      - name: Verify deployment
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Verifying migrations were applied..."
          pnpm prisma migrate status
          echo "✅ Staging database migrations deployed successfully!"

      - name: Check if seeding needed
        id: check_seed
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Checking if database needs seeding..."
          USER_COUNT=$(npx prisma db execute --stdin <<< "SELECT COUNT(*) FROM \"User\";" | grep -o '[0-9]*' | head -1 || echo "0")

          if [ "${{ github.event.inputs.force_reseed }}" = "true" ]; then
            echo "needs_seed=true" >> $GITHUB_OUTPUT
            echo "Force reseed requested"
          elif [ "$USER_COUNT" = "0" ]; then
            echo "needs_seed=true" >> $GITHUB_OUTPUT
            echo "Database is empty, seeding required"
          else
            echo "needs_seed=false" >> $GITHUB_OUTPUT
            echo "Database has $USER_COUNT users, skipping seed"
          fi

      - name: Run staging seed
        if: steps.check_seed.outputs.needs_seed == 'true'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Running seed script for staging database..."
          npx tsx prisma/seed-staging.ts
          echo "✅ Staging database seeded successfully!"
