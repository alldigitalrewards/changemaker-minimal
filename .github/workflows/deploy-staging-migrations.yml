name: Deploy Staging Migrations

on:
  push:
    branches:
      - staging

jobs:
  deploy-migrations:
    name: Deploy Migrations to Staging Database
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma generate

      - name: Check migration status
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Checking migration status..."
          pnpm prisma migrate status

      - name: Deploy migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Deploying pending migrations to staging database..."
          pnpm prisma migrate deploy

      - name: Verify deployment
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Verifying migrations were applied..."
          pnpm prisma migrate status
          echo "✅ Staging database migrations deployed successfully!"

      - name: Check if seeding needed
        id: check_seed
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Checking if database needs seeding..."
          USER_COUNT=$(npx prisma db execute --stdin <<< "SELECT COUNT(*) FROM \"User\";" | grep -o '[0-9]*' | head -1 || echo "0")
          if [ "$USER_COUNT" = "0" ]; then
            echo "needs_seed=true" >> $GITHUB_OUTPUT
            echo "Database is empty, seeding required"
          else
            echo "needs_seed=false" >> $GITHUB_OUTPUT
            echo "Database has $USER_COUNT users, skipping seed"
          fi

      - name: Run staging seed
        if: steps.check_seed.outputs.needs_seed == 'true'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Running seed script for staging database..."
          npx tsx prisma/seed-staging.ts
          echo "✅ Staging database seeded successfully!"
