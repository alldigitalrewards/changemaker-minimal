generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Activity {
  id                     String                   @id @db.Uuid
  templateId             String                   @db.Uuid
  challengeId            String                   @db.Uuid
  pointsValue            Int
  maxSubmissions         Int                      @default(1)
  deadline               DateTime?
  isRequired             Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  position               Int                      @default(0)
  rewardRules            Json[]                   @default([])
  Challenge              Challenge                @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  ActivityTemplate       ActivityTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)
  ActivitySubmission     ActivitySubmission[]
  WorkspaceCommunication WorkspaceCommunication[]

  @@index([challengeId])
  @@index([challengeId, position])
  @@index([templateId])
}

model ActivityEvent {
  id                                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId                          String            @db.Uuid
  challengeId                          String?           @db.Uuid
  enrollmentId                         String?           @db.Uuid
  userId                               String?           @db.Uuid
  actorUserId                          String?           @db.Uuid
  type                                 ActivityEventType
  metadata                             Json?
  createdAt                            DateTime          @default(now())
  User_ActivityEvent_actorUserIdToUser User?             @relation("ActivityEvent_actorUserIdToUser", fields: [actorUserId], references: [id])
  Challenge                            Challenge?        @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  Enrollment                           Enrollment?       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  User_ActivityEvent_userIdToUser      User?             @relation("ActivityEvent_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)
  Workspace                            Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([challengeId, createdAt])
  @@index([type, createdAt])
  @@index([userId, createdAt])
  @@index([workspaceId, createdAt])
}

model ActivitySubmission {
  id                String           @id @db.Uuid
  activityId        String           @db.Uuid
  userId            String           @db.Uuid
  enrollmentId      String           @db.Uuid
  textContent       String?
  fileUrls          String[]
  linkUrl           String?
  status            SubmissionStatus @default(PENDING)
  pointsAwarded     Int?
  reviewNotes       String?
  reviewedBy        String?          @db.Uuid
  reviewedAt        DateTime?
  managerReviewedBy String?          @db.Uuid
  managerReviewedAt DateTime?
  managerNotes      String?
  submittedAt       DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  rewardIssuanceId  String?          @unique @db.Uuid
  rewardIssued      Boolean          @default(false)
  Activity          Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  Enrollment        Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  RewardIssuance    RewardIssuance?  @relation(fields: [rewardIssuanceId], references: [id])
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@index([enrollmentId])
  @@index([status])
  @@index([userId])
}

model ActivityTemplate {
  id               String       @id @db.Uuid
  name             String
  description      String
  type             ActivityType
  basePoints       Int          @default(10)
  workspaceId      String       @db.Uuid
  requiresApproval Boolean      @default(true)
  allowMultiple    Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  rewardType       RewardType?
  rewardConfig     Json?
  Activity         Activity[]
  Workspace        Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([workspaceId, type])
}

model Challenge {
  id                     String                   @id @db.Uuid
  title                  String
  description            String
  startDate              DateTime
  endDate                DateTime
  enrollmentDeadline     DateTime?
  workspaceId            String                   @db.Uuid
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  status                 ChallengeStatus          @default(DRAFT)
  emailEditAllowed       Boolean                  @default(true)
  requireManagerApproval Boolean                  @default(false)
  requireAdminReapproval Boolean                  @default(true)
  rewardConfig           Json?
  rewardType             RewardType?
  Activity               Activity[]
  ActivityEvent          ActivityEvent[]
  Workspace              Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  ChallengeAssignment    ChallengeAssignment[]
  ChallengePointsBudget  ChallengePointsBudget?
  Enrollment             Enrollment[]
  InviteCode             InviteCode[]
  PointsLedger           PointsLedger[]
  RewardIssuance         RewardIssuance[]
  WorkspaceCommunication WorkspaceCommunication[]

  @@index([workspaceId, createdAt])
  @@index([workspaceId])
  @@index([workspaceId, startDate])
  @@index([workspaceId, status])
}

model ChallengeAssignment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  challengeId String    @db.Uuid
  managerId   String    @db.Uuid
  workspaceId String    @db.Uuid
  assignedBy  String    @db.Uuid
  assignedAt  DateTime  @default(now())
  Challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  Manager     User      @relation("ManagerAssignments", fields: [managerId], references: [id], onDelete: Cascade)
  AssignedBy  User      @relation("AssignmentCreator", fields: [assignedBy], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([challengeId, managerId])
  @@index([managerId, workspaceId])
  @@index([challengeId])
  @@index([workspaceId])
}

model ChallengePointsBudget {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  challengeId String    @unique @db.Uuid
  workspaceId String    @db.Uuid
  totalBudget Int       @default(0)
  allocated   Int       @default(0)
  updatedBy   String?   @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  Challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  User        User?     @relation(fields: [updatedBy], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}

model Enrollment {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String               @db.Uuid
  challengeId        String               @db.Uuid
  status             EnrollmentStatus     @default(INVITED)
  enrolledAt         DateTime             @default(now())
  completedAt        DateTime?
  totalPoints        Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  ActivityEvent      ActivityEvent[]
  ActivitySubmission ActivitySubmission[]
  Challenge          Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([challengeId])
  @@index([status])
  @@index([userId])
}

model InviteCode {
  id               String             @id @db.Uuid
  code             String             @unique
  workspaceId      String             @db.Uuid
  challengeId      String?            @db.Uuid
  role             Role               @default(PARTICIPANT)
  expiresAt        DateTime
  maxUses          Int                @default(1)
  usedCount        Int                @default(0)
  createdBy        String             @db.Uuid
  createdAt        DateTime           @default(now())
  targetEmail      String?
  Challenge        Challenge?         @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  User             User               @relation(fields: [createdBy], references: [id])
  Workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  InviteRedemption InviteRedemption[]

  @@index([code])
  @@index([targetEmail])
  @@index([workspaceId])
}

model InviteRedemption {
  id         String     @id @db.Uuid
  inviteId   String     @db.Uuid
  userId     String     @db.Uuid
  redeemedAt DateTime   @default(now())
  InviteCode InviteCode @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([inviteId, userId])
  @@index([userId])
}

model PointsBalance {
  id              String    @id @db.Uuid
  userId          String    @db.Uuid
  workspaceId     String    @db.Uuid
  totalPoints     Int       @default(0)
  availablePoints Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  User            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model PointsLedger {
  id                                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId                         String     @db.Uuid
  challengeId                         String?    @db.Uuid
  toUserId                            String     @db.Uuid
  amount                              Int
  reason                              String?
  submissionId                        String?    @db.Uuid
  actorUserId                         String?    @db.Uuid
  createdAt                           DateTime   @default(now())
  User_PointsLedger_actorUserIdToUser User?      @relation("PointsLedger_actorUserIdToUser", fields: [actorUserId], references: [id])
  Challenge                           Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  User_PointsLedger_toUserIdToUser    User       @relation("PointsLedger_toUserIdToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  Workspace                           Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([challengeId, createdAt])
  @@index([toUserId, createdAt])
  @@index([workspaceId, createdAt])
}

model RewardIssuance {
  id                    String              @id @db.Uuid
  userId                String              @db.Uuid
  workspaceId           String              @db.Uuid
  challengeId           String?             @db.Uuid
  type                  RewardType
  amount                Int?
  currency              String?
  skuId                 String?
  provider              String?
  status                RewardStatus        @default(PENDING)
  issuedAt              DateTime?
  error                 String?
  metadata              Json?
  externalTransactionId String?
  externalStatus        String?
  externalResponse      Json?
  ActivitySubmission    ActivitySubmission?
  Challenge             Challenge?          @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  User                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace             Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([challengeId])
  @@index([status])
  @@index([userId])
  @@index([workspaceId])
}

model TenantSku {
  id        String   @id @db.Uuid
  tenantId  String
  skuId     String
  label     String
  provider  String?
  createdAt DateTime @default(now())

  @@unique([tenantId, skuId])
  @@index([tenantId])
}

model User {
  id                                            String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                         String                           @unique
  supabaseUserId                                String?                          @unique @db.Uuid
  createdAt                                     DateTime                         @default(now())
  updatedAt                                     DateTime                         @default(now())
  isPending                                     Boolean                          @default(false)
  emailChangePending                            Json?
  permissions                                   String[]                         @default([])
  tenantId                                      String                           @default("default")
  ActivityEvent_ActivityEvent_actorUserIdToUser ActivityEvent[]                  @relation("ActivityEvent_actorUserIdToUser")
  ActivityEvent_ActivityEvent_userIdToUser      ActivityEvent[]                  @relation("ActivityEvent_userIdToUser")
  ActivitySubmission                            ActivitySubmission[]
  ChallengeAssignment_ManagerAssignments        ChallengeAssignment[]            @relation("ManagerAssignments")
  ChallengeAssignment_AssignmentCreator         ChallengeAssignment[]            @relation("AssignmentCreator")
  ChallengePointsBudget                         ChallengePointsBudget[]
  Enrollment                                    Enrollment[]
  InviteCode                                    InviteCode[]
  InviteRedemption                              InviteRedemption[]
  PointsBalance                                 PointsBalance[]
  PointsLedger_PointsLedger_actorUserIdToUser   PointsLedger[]                   @relation("PointsLedger_actorUserIdToUser")
  PointsLedger_PointsLedger_toUserIdToUser      PointsLedger[]                   @relation("PointsLedger_toUserIdToUser")
  RewardIssuance                                RewardIssuance[]
  WorkspaceEmailSettings                        WorkspaceEmailSettings[]
  WorkspaceEmailTemplate                        WorkspaceEmailTemplate[]
  WorkspaceMembership                           WorkspaceMembership[]
  WorkspaceMembershipPreferences                WorkspaceMembershipPreferences[]
  WorkspacePointsBudget                         WorkspacePointsBudget[]
  WorkspaceParticipantSegment                   WorkspaceParticipantSegment[]    @relation("SegmentCreator")
  WorkspaceCommunication                        WorkspaceCommunication[]         @relation("CommunicationSender")

  @@index([tenantId])
}

model Workspace {
  id                             String                           @id @db.Uuid
  slug                           String                           @unique
  name                           String
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @default(now())
  active                         Boolean                          @default(true)
  published                      Boolean                          @default(true)
  tenantId                       String                           @default("default")
  ActivityEvent                  ActivityEvent[]
  ActivityTemplate               ActivityTemplate[]
  Challenge                      Challenge[]
  ChallengeAssignment            ChallengeAssignment[]
  ChallengePointsBudget          ChallengePointsBudget[]
  InviteCode                     InviteCode[]
  PointsBalance                  PointsBalance[]
  PointsLedger                   PointsLedger[]
  RewardIssuance                 RewardIssuance[]
  WorkspaceEmailSettings         WorkspaceEmailSettings?
  WorkspaceEmailTemplate         WorkspaceEmailTemplate[]
  WorkspaceMembership            WorkspaceMembership[]
  WorkspaceMembershipPreferences WorkspaceMembershipPreferences[]
  WorkspacePointsBudget          WorkspacePointsBudget?
  WorkspaceParticipantSegment    WorkspaceParticipantSegment[]
  WorkspaceCommunication         WorkspaceCommunication[]

  @@index([tenantId])
}

model WorkspaceEmailSettings {
  id          String    @id @db.Uuid
  workspaceId String    @unique @db.Uuid
  fromName    String?
  fromEmail   String?
  replyTo     String?
  footerHtml  String?
  brandColor  String?
  updatedBy   String?   @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  User        User?     @relation(fields: [updatedBy], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model WorkspaceEmailTemplate {
  id          String            @id @db.Uuid
  workspaceId String            @db.Uuid
  type        EmailTemplateType
  subject     String?
  html        String?
  enabled     Boolean           @default(false)
  updatedBy   String?           @db.Uuid
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  User        User?             @relation(fields: [updatedBy], references: [id])
  Workspace   Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, type])
  @@index([workspaceId])
}

model WorkspaceMembership {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String    @db.Uuid
  workspaceId    String    @db.Uuid
  supabaseUserId String?   @db.Uuid
  role           Role
  isPrimary      Boolean   @default(false)
  joinedAt       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  preferences    Json?
  User           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([userId, isPrimary])
  @@index([workspaceId])
  @@index([supabaseUserId])
}

model WorkspaceMembershipPreferences {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  workspaceId String    @db.Uuid
  defaultRole Role      @default(PARTICIPANT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model WorkspacePointsBudget {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId String    @unique @db.Uuid
  totalBudget Int       @default(0)
  allocated   Int       @default(0)
  updatedBy   String?   @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  User        User?     @relation(fields: [updatedBy], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model WorkspaceParticipantSegment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId String    @db.Uuid
  name        String
  description String?
  filterJson  Json?
  createdBy   String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  User        User      @relation("SegmentCreator", fields: [createdBy], references: [id])

  @@index([workspaceId])
}

model WorkspaceCommunication {
  id          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId String                @db.Uuid
  challengeId String?               @db.Uuid
  activityId  String?               @db.Uuid
  scope       CommunicationScope
  audience    CommunicationAudience @default(ALL)
  subject     String
  message     String
  sentBy      String                @db.Uuid
  sentAt      DateTime              @default(now())
  updatedAt   DateTime              @default(now()) @updatedAt
  workspace   Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  challenge   Challenge?            @relation(fields: [challengeId], references: [id])
  activity    Activity?             @relation(fields: [activityId], references: [id])
  sender      User                  @relation("CommunicationSender", fields: [sentBy], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([challengeId])
  @@index([activityId])
  @@index([sentBy])
  @@index([scope, audience])
}

enum ActivityEventType {
  INVITE_SENT
  INVITE_REDEEMED
  EMAIL_RESENT
  ENROLLED
  UNENROLLED
  RBAC_ROLE_CHANGED
  SUBMISSION_CREATED
  SUBMISSION_APPROVED
  SUBMISSION_REJECTED
  CHALLENGE_CREATED
  CHALLENGE_UPDATED
  CHALLENGE_DUPLICATED
  CHALLENGE_PUBLISHED
  CHALLENGE_UNPUBLISHED
  CHALLENGE_ARCHIVED
  ACTIVITY_CREATED
  ACTIVITY_UPDATED
  BULK_UNENROLL
}

enum ActivityType {
  TEXT_SUBMISSION
  FILE_UPLOAD
  PHOTO_UPLOAD
  LINK_SUBMISSION
  MULTIPLE_CHOICE
  VIDEO_SUBMISSION
}

enum ChallengeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EmailTemplateType {
  INVITE
  EMAIL_RESENT
  ENROLLMENT_UPDATE
  REMINDER
  GENERIC
}

enum EnrollmentStatus {
  INVITED
  ENROLLED
  WITHDRAWN
}

enum RewardStatus {
  PENDING
  ISSUED
  FAILED
  CANCELLED
}

enum RewardType {
  points
  sku
  monetary
}

enum Role {
  ADMIN
  PARTICIPANT
  MANAGER
}

enum SubmissionStatus {
  PENDING
  MANAGER_APPROVED
  NEEDS_REVISION
  APPROVED
  REJECTED
  DRAFT
}

enum CommunicationScope {
  WORKSPACE
  CHALLENGE
  ACTIVITY
}

enum CommunicationAudience {
  ALL
  ENROLLED
  INVITED
  COMPLETED
}
