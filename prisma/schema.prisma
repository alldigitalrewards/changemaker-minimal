generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Workspace {
  id                String                @id @default(uuid()) @db.Uuid
  slug              String                @unique
  name              String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @default(now()) @updatedAt
  activityTemplates ActivityTemplate[]
  challenges        Challenge[]
  inviteCodes       InviteCode[]
  pointsBalances    PointsBalance[]
  users             User[]
  memberships       WorkspaceMembership[]
}

model User {
  id                  String                @id @default(uuid()) @db.Uuid
  email               String                @unique
  supabaseUserId      String?               @unique @db.Uuid
  role                Role
  workspaceId         String?               @db.Uuid
  primaryWorkspaceId  String?               @db.Uuid
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  activitySubmissions ActivitySubmission[]
  enrollments         Enrollment[]
  createdInvites      InviteCode[]          @relation("InviteCreator")
  pointsBalances      PointsBalance[]
  workspace           Workspace?            @relation(fields: [workspaceId], references: [id])
  memberships         WorkspaceMembership[]

  @@index([workspaceId])
  @@index([workspaceId, role])
}

model Challenge {
  id                 String       @id @default(uuid()) @db.Uuid
  title              String
  description        String
  startDate          DateTime
  endDate            DateTime
  enrollmentDeadline DateTime?
  workspaceId        String       @db.Uuid
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now()) @updatedAt
  activities         Activity[]
  workspace          Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  enrollments        Enrollment[]
  inviteCodes        InviteCode[]

  @@index([workspaceId])
  @@index([workspaceId, createdAt])
  @@index([workspaceId, startDate])
}

model Enrollment {
  id                  String               @id @default(uuid()) @db.Uuid
  userId              String               @db.Uuid
  challengeId         String               @db.Uuid
  status              EnrollmentStatus     @default(INVITED)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  activitySubmissions ActivitySubmission[]
  challenge           Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
}

model ActivityTemplate {
  id               String       @id @default(uuid()) @db.Uuid
  name             String
  description      String
  type             ActivityType
  basePoints       Int          @default(10)
  workspaceId      String       @db.Uuid
  requiresApproval Boolean      @default(true)
  allowMultiple    Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  activities       Activity[]
  workspace        Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([workspaceId, type])
}

model Activity {
  id             String               @id @default(uuid()) @db.Uuid
  templateId     String               @db.Uuid
  challengeId    String               @db.Uuid
  pointsValue    Int
  maxSubmissions Int                  @default(1)
  deadline       DateTime?
  isRequired     Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  challenge      Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  template       ActivityTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  submissions    ActivitySubmission[]

  @@index([challengeId])
  @@index([templateId])
}

model ActivitySubmission {
  id            String           @id @default(uuid()) @db.Uuid
  activityId    String           @db.Uuid
  userId        String           @db.Uuid
  enrollmentId  String           @db.Uuid
  textContent   String?
  fileUrls      String[]
  linkUrl       String?
  status        SubmissionStatus @default(PENDING)
  pointsAwarded Int?
  reviewNotes   String?
  reviewedBy    String?          @db.Uuid
  reviewedAt    DateTime?
  submittedAt   DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  activity      Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  enrollment    Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@index([userId])
  @@index([enrollmentId])
  @@index([status])
}

model PointsBalance {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @db.Uuid
  workspaceId     String    @db.Uuid
  totalPoints     Int       @default(0)
  availablePoints Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model InviteCode {
  id          String     @id @default(uuid()) @db.Uuid
  code        String     @unique
  workspaceId String     @db.Uuid
  challengeId String?    @db.Uuid
  role        Role       @default(PARTICIPANT)
  expiresAt   DateTime
  maxUses     Int        @default(1)
  usedCount   Int        @default(0)
  createdBy   String     @db.Uuid
  createdAt   DateTime   @default(now())
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  creator     User       @relation("InviteCreator", fields: [createdBy], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([workspaceId])
}

model WorkspaceMembership {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @db.Uuid
  workspaceId String    @db.Uuid
  role        Role
  isPrimary   Boolean   @default(false)
  joinedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
  @@index([userId, isPrimary])
}

enum Role {
  ADMIN
  PARTICIPANT
}

enum EnrollmentStatus {
  INVITED
  ENROLLED
  WITHDRAWN
}

enum ActivityType {
  TEXT_SUBMISSION
  FILE_UPLOAD
  PHOTO_UPLOAD
  LINK_SUBMISSION
  MULTIPLE_CHOICE
  VIDEO_SUBMISSION
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}
