// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// Models from REFACTOR_GUIDE.md
enum Role {
  ADMIN
  PARTICIPANT
}

enum EnrollmentStatus {
  INVITED
  ENROLLED
  WITHDRAWN
}

enum ActivityType {
  TEXT_SUBMISSION
  FILE_UPLOAD
  PHOTO_UPLOAD
  LINK_SUBMISSION
  MULTIPLE_CHOICE
  VIDEO_SUBMISSION
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

model Workspace {
  id                String             @id @default(uuid()) @db.Uuid
  slug              String             @unique
  name              String
  users             User[]
  challenges        Challenge[]
  activityTemplates ActivityTemplate[]
  pointsBalances    PointsBalance[]
  inviteCodes       InviteCode[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model User {
  id                  String                @id @default(uuid()) @db.Uuid
  email               String                @unique
  supabaseUserId      String?               @unique @db.Uuid
  role                Role
  workspaceId         String?               @db.Uuid
  workspace           Workspace?            @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  enrollments         Enrollment[]
  activitySubmissions ActivitySubmission[]
  pointsBalances      PointsBalance[]
  createdInvites      InviteCode[]          @relation("InviteCreator")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt @default(now())

  @@index([workspaceId])
  @@index([workspaceId, role])
}

model Challenge {
  id                 String       @id @default(uuid()) @db.Uuid
  title              String
  description        String
  startDate          DateTime
  endDate            DateTime
  enrollmentDeadline DateTime?
  workspaceId        String       @db.Uuid
  workspace          Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  enrollments        Enrollment[]
  activities         Activity[]
  inviteCodes        InviteCode[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt @default(now())

  @@index([workspaceId])
  @@index([workspaceId, createdAt])
  @@index([workspaceId, startDate])
}

model Enrollment {
  id                  String               @id @default(uuid()) @db.Uuid
  userId              String               @db.Uuid
  challengeId         String               @db.Uuid
  status              EnrollmentStatus     @default(INVITED)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge           Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  activitySubmissions ActivitySubmission[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt @default(now())

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
}

model ActivityTemplate {
  id               String       @id @default(uuid()) @db.Uuid
  name             String
  description      String
  type             ActivityType
  basePoints       Int          @default(10)
  workspaceId      String       @db.Uuid
  workspace        Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  activities       Activity[]
  requiresApproval Boolean      @default(true)
  allowMultiple    Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt @default(now())

  @@index([workspaceId])
  @@index([workspaceId, type])
}

model Activity {
  id             String               @id @default(uuid()) @db.Uuid
  templateId     String               @db.Uuid
  template       ActivityTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  challengeId    String               @db.Uuid
  challenge      Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  pointsValue    Int
  maxSubmissions Int                  @default(1)
  deadline       DateTime?
  isRequired     Boolean              @default(false)
  submissions    ActivitySubmission[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt @default(now())

  @@index([challengeId])
  @@index([templateId])
}

model ActivitySubmission {
  id           String           @id @default(uuid()) @db.Uuid
  activityId   String           @db.Uuid
  activity     Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId       String           @db.Uuid
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentId String           @db.Uuid
  enrollment   Enrollment       @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  textContent  String?
  fileUrls     String[]
  linkUrl      String?
  status       SubmissionStatus @default(PENDING)
  pointsAwarded Int?
  reviewNotes  String?
  reviewedBy   String?          @db.Uuid
  reviewedAt   DateTime?
  submittedAt  DateTime         @default(now())
  updatedAt    DateTime         @updatedAt @default(now())

  @@index([activityId])
  @@index([userId])
  @@index([enrollmentId])
  @@index([status])
}

model PointsBalance {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @db.Uuid
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId     String    @db.Uuid
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  totalPoints     Int       @default(0)
  availablePoints Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model InviteCode {
  id          String    @id @default(uuid()) @db.Uuid
  code        String    @unique
  workspaceId String    @db.Uuid
  challengeId String?   @db.Uuid  
  role        Role      @default(PARTICIPANT)
  expiresAt   DateTime
  maxUses     Int       @default(1)
  usedCount   Int       @default(0)
  createdBy   String    @db.Uuid
  createdAt   DateTime  @default(now())
  
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  creator     User       @relation("InviteCreator", fields: [createdBy], references: [id])
  
  @@index([code])
  @@index([workspaceId])
}
