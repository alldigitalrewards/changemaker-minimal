/**
 * Canonical Type Definitions for Changemaker Database Queries
 *
 * This file serves as the single source of truth for all database query return types.
 * All types are derived directly from Prisma's generated schema using the validator pattern.
 *
 * ## Pattern: Prisma.validator + GetPayload
 *
 * Each type alias is created using:
 * 1. Prisma.validator<Prisma.[Model]DefaultArgs>()({ include: {...} })
 * 2. Prisma.[Model]GetPayload<typeof validatorArgs>
 *
 * ## Benefits:
 * - **Zero Drift**: Types automatically sync with schema changes
 * - **Type Safety**: Compile-time errors if includes don't match schema
 * - **Single Source of Truth**: No manual type definitions to maintain
 * - **Relation Correctness**: Uses PascalCase relation names as generated by Prisma
 *
 * ## Usage:
 *
 * ```typescript
 * import { EnrollmentWithDetails, ChallengeWithDetails } from '@/lib/db/types';
 *
 * async function getEnrollment(id: string): Promise<EnrollmentWithDetails> {
 *   return await prisma.enrollment.findUnique({
 *     where: { id },
 *     include: {
 *       User: { select: { id: true, email: true, name: true } },
 *       Challenge: { select: { id: true, title: true, description: true, workspaceId: true, status: true, enrollmentDeadline: true } },
 *       Workspace: true,
 *       ActivitySubmission: {
 *         include: {
 *           Activity: {
 *             include: {
 *               ActivityTemplate: true,
 *               Challenge: true
 *             }
 *           }
 *         }
 *       }
 *     }
 *   });
 * }
 * ```
 *
 * ## Important Notes:
 * - Always use PascalCase for relations (User, Challenge, Enrollment, etc.)
 * - Never use lowercase (user, challenge, enrollment) - these will cause type errors
 * - Keep includes in sync between validator definitions and actual queries
 * - Update these types when schema relationships change
 */

import { Prisma } from '@prisma/client';

// ============================================================================
// Enrollment Types
// ============================================================================

/**
 * Enrollment with all related entities needed for enrollment details view
 * Includes: User info, Challenge (with Workspace), ActivitySubmissions with nested Activity and ActivityTemplate
 */
const enrollmentWithDetailsArgs = Prisma.validator<Prisma.EnrollmentDefaultArgs>()({
  include: {
    User: {
      select: {
        id: true,
        email: true
      }
    },
    Challenge: {
      include: {
        Workspace: true
      }
    },
    ActivitySubmission: {
      include: {
        Activity: {
          include: {
            ActivityTemplate: true,
            Challenge: true
          }
        }
      }
    }
  }
});

export type EnrollmentWithDetails = Prisma.EnrollmentGetPayload<typeof enrollmentWithDetailsArgs>;

// ============================================================================
// Challenge Types
// ============================================================================

/**
 * Challenge with all related entities needed for challenge management
 * Includes: Workspace, Activity (with ActivityTemplate), Enrollment relations, counts
 */
const challengeWithDetailsArgs = Prisma.validator<Prisma.ChallengeDefaultArgs>()({
  include: {
    Workspace: true,
    Activity: {
      include: {
        ActivityTemplate: true
      }
    },
    Enrollment: {
      include: {
        User: {
          select: {
            id: true,
            email: true
          }
        }
      }
    },
    _count: {
      select: {
        Enrollment: true,
        Activity: true
      }
    }
  }
});

export type ChallengeWithDetails = Prisma.ChallengeGetPayload<typeof challengeWithDetailsArgs>;

// ============================================================================
// Workspace Types
// ============================================================================

/**
 * Workspace with membership and challenge counts
 * Includes: WorkspaceMembership with nested User and Enrollment, Challenge, and _count
 */
const workspaceWithDetailsArgs = Prisma.validator<Prisma.WorkspaceDefaultArgs>()({
  include: {
    WorkspaceMembership: {
      include: {
        User: {
          include: {
            Enrollment: {
              select: { challengeId: true }
            }
          }
        }
      }
    },
    Challenge: true,
    _count: {
      select: {
        WorkspaceMembership: true,
        Challenge: true
      }
    }
  }
});

export type WorkspaceWithDetails = Prisma.WorkspaceGetPayload<typeof workspaceWithDetailsArgs>;

// ============================================================================
// User Types
// ============================================================================


// ============================================================================
// ActivitySubmission Types
// ============================================================================

/**
 * ActivitySubmission with all related entities for submission review
 * Includes: Activity (with ActivityTemplate and Challenge), Enrollment (with User)
 */
const activitySubmissionWithDetailsArgs = Prisma.validator<Prisma.ActivitySubmissionDefaultArgs>()({
  include: {
    Activity: {
      include: {
        ActivityTemplate: true,
        Challenge: {
          select: {
            id: true,
            title: true,
            description: true,
            workspaceId: true
          }
        }
      }
    },
    Enrollment: {
      include: {
        User: {
          select: {
            id: true,
            email: true
          }
        }
      }
    }
  }
});

export type ActivitySubmissionWithDetails = Prisma.ActivitySubmissionGetPayload<typeof activitySubmissionWithDetailsArgs>;
